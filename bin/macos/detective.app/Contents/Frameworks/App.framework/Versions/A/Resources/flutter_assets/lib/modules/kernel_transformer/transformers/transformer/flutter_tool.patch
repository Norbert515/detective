From c700ef874e02c811be31a90a4ee462781025ccb2 Mon Sep 17 00:00:00 2001
From: norbertkozsir <kozsir.norbert@gmail.com>
Date: Thu, 11 Mar 2021 21:46:28 +0100
Subject: [PATCH] Detective flutter tool patch

---
 .../lib/src/build_system/targets/common.dart  |   2 +
 .../flutter_tools/lib/src/detective_hook.dart | 129 ++++++++++++++++++
 2 files changed, 131 insertions(+)
 create mode 100644 packages/flutter_tools/lib/src/detective_hook.dart

diff --git a/packages/flutter_tools/lib/src/build_system/targets/common.dart b/packages/flutter_tools/lib/src/build_system/targets/common.dart
index 3105ae0684..3920a34643 100644
--- a/packages/flutter_tools/lib/src/build_system/targets/common.dart
+++ b/packages/flutter_tools/lib/src/build_system/targets/common.dart
@@ -10,6 +10,7 @@ import '../../base/file_system.dart';
 import '../../build_info.dart';
 import '../../compile.dart';
 import '../../dart/package_map.dart';
+import '../../detective_hook.dart';
 import '../../globals.dart' as globals hide fs, processManager, artifacts, logger;
 import '../build_system.dart';
 import '../depfile.dart';
@@ -277,6 +278,7 @@ class KernelSnapshot extends Target {
     if (output == null || output.errorCount != 0) {
       throw Exception();
     }
+    await DetectiveHook().injectNewFrontendServer(environment);
   }
 }

diff --git a/packages/flutter_tools/lib/src/detective_hook.dart b/packages/flutter_tools/lib/src/detective_hook.dart
new file mode 100644
index 0000000000..1f276f984e
--- /dev/null
+++ b/packages/flutter_tools/lib/src/detective_hook.dart
@@ -0,0 +1,129 @@
+import 'dart:io';
+import 'artifacts.dart';
+import 'base/common.dart';
+import 'build_system/build_system.dart';
+import 'cache.dart';
+import 'globals.dart' as globals;
+
+const String aspectdImplPackageRelPath = '..';
+const String frontendServerDartSnapshot = 'frontend_server.dart.snapshot';
+
+class DetectiveHook {
+
+  static String aspectdTransformerSnapshot;
+
+  /// Returns the directory the modified frontend server resides in
+  static Future<String> getFlutterFrontendServerDirectory(Environment environment) async {
+    return environment.flutterRootDir.uri
+        .resolve('detective/')
+        .resolve('v1/')
+        .resolve('transformer/').toFilePath(windows: Platform.isWindows);
+  }
+
+  Future<bool> injectNewFrontendServer(Environment environment) async {
+
+    print("HHHHHHHHHHHH");
+    return checkAspectdFlutterFrontendServerSnapshot('', environment);
+  }
+
+  /// Replaces the frontend server with a modified one that also includes the
+  /// program transformer
+  static Future<bool> checkAspectdFlutterFrontendServerSnapshot(
+      String packagesPath, Environment environment) async {
+
+    print('Starting method');
+    final String flutterFrontendServerDirectory =
+    await getFlutterFrontendServerDirectory(environment);
+
+    final String aspectdFlutterFrontendServerSnapshot = globals.fs.path.join(
+        flutterFrontendServerDirectory,
+        frontendServerDartSnapshot);
+
+    final String defaultFlutterFrontendServerSnapshot = globals.artifacts
+        .getArtifactPath(Artifact.frontendServerSnapshotForEngineDartSdk);
+
+    if (!globals.fs.file(aspectdFlutterFrontendServerSnapshot).existsSync()) {
+      print('Ok did not exist');
+
+
+      final String packagesPath = globals.fs.path
+            .join(globals.fs.currentDirectory.absolute.path, '.packages');
+      print(packagesPath);
+
+      String flutterRootPath = environment.flutterRootDir.uri.toFilePath(windows: Platform.isWindows);
+      Uri newDarkSDK = Uri.file(flutterRootPath).resolve('detective/').resolve('sdk/');
+
+      final Uri resolved = newDarkSDK;
+
+      print('HIHIHI');
+      print(resolved.toFilePath(windows: false));
+      print(flutterRootPath);
+      print(newDarkSDK);
+
+      final String frontendServerPackageConfigJsonFile =
+          '$flutterFrontendServerDirectory/package_config.json';
+      final String rebasedFrontendServerPackageConfigJsonFile =
+          '$flutterFrontendServerDirectory/rebased_package_config.json';
+      String frontendServerPackageConfigJson = globals.fs
+          .file(frontendServerPackageConfigJsonFile)
+          .readAsStringSync();
+
+
+      frontendServerPackageConfigJson = frontendServerPackageConfigJson
+          .replaceAll('../../../third_party/dart/', resolved.toFilePath(windows: Platform.isWindows));
+
+
+      globals.fs
+          .file(rebasedFrontendServerPackageConfigJsonFile)
+          .writeAsStringSync(frontendServerPackageConfigJson);
+
+      final List<String> commands = <String>[
+        globals.artifacts.getArtifactPath(Artifact.engineDartBinary),
+        '--deterministic',
+        '--packages=$rebasedFrontendServerPackageConfigJsonFile',
+        '--snapshot=$aspectdFlutterFrontendServerSnapshot',
+        '--snapshot-kind=kernel',
+        '$flutterFrontendServerDirectory/starter.dart'
+      ];
+      final ProcessResult processResult =
+      await globals.processManager.run(commands);
+      globals.fs.file(rebasedFrontendServerPackageConfigJsonFile).deleteSync();
+      if (processResult.exitCode != 0 ||
+          globals.fs.file(aspectdFlutterFrontendServerSnapshot).existsSync() ==
+              false) {
+        throwToolExit(
+            'Detective unexpected error: ${processResult.stderr.toString()}');
+      }
+    }
+
+    if (globals.fs.file(defaultFlutterFrontendServerSnapshot).existsSync()) {
+      globals.fs.file(defaultFlutterFrontendServerSnapshot).deleteSync();
+    }
+
+    globals.fs
+        .file(aspectdFlutterFrontendServerSnapshot)
+        .copySync(defaultFlutterFrontendServerSnapshot);
+    return true;
+  }
+
+  static Future<void> getDartSdkDependency(String aspectdDir) async {
+    final ProcessResult processResult = await globals.processManager.run(
+        <String>[
+          globals.fs.path.join(
+              globals.artifacts.getArtifactPath(Artifact.engineDartSdkPath),
+              'bin',
+              'pub'),
+          'get',
+          '--verbosity=warning'
+        ],
+        workingDirectory: aspectdDir,
+        environment: <String, String>{'FLUTTER_ROOT': Cache.flutterRoot});
+    if (processResult.exitCode != 0) {
+      throwToolExit(
+          'Detective unexpected error: ${processResult.stderr.toString()}');
+    }
+  }
+
+}
\ No newline at end of file
--
2.23.0